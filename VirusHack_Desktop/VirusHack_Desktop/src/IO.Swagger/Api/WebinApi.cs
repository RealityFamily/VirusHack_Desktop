/* 
 * Swagger Иди нахер
 *
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;
using System.IO;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebinApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Получение перечня вебинаров на день пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>List&lt;Webinar&gt;</returns>
        List<Webinar> GetDayWebinars (string token);

        /// <summary>
        /// Получение перечня вебинаров на день пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>ApiResponse of List&lt;Webinar&gt;</returns>
        ApiResponse<List<Webinar>> GetDayWebinarsWithHttpInfo (string token);
        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetWebinarConnection (string token, Guid? webinarId);

        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetWebinarConnectionWithHttpInfo (string token, Guid? webinarId);
        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 GetWebinarDisconnection(string token, string participationId);

        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> GetWebinarDisconnectionWithHttpInfo(string token, string participationId);
        /// <summary>
        /// Получение файла вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>string</returns>
        string GetWebinarFileToDownload (string token, Guid? webinarId, Guid? fileId);

        /// <summary>
        /// Получение файла вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetWebinarFileToDownloadWithHttpInfo (string token, Guid? webinarId, Guid? fileId);
        /// <summary>
        /// Получение перечня файлов вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>List&lt;ModelFile&gt;</returns>
        List<ModelFile> GetWebinarFiles (string token, Guid? webinarId);

        /// <summary>
        /// Получение перечня файлов вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>ApiResponse of List&lt;ModelFile&gt;</returns>
        ApiResponse<List<ModelFile>> GetWebinarFilesWithHttpInfo (string token, Guid? webinarId);
        /// <summary>
        /// Получение статистики вебинара.
        /// </summary>
        /// <remarks>
        /// Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>Webinar</returns>
        Webinar GetWebinarStatic (string token, Guid? webinarId);

        /// <summary>
        /// Получение статистики вебинара.
        /// </summary>
        /// <remarks>
        /// Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>ApiResponse of Webinar</returns>
        ApiResponse<Webinar> GetWebinarStaticWithHttpInfo (string token, Guid? webinarId);
        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>List&lt;Webinar&gt;</returns>
        List<Webinar> GetWeekWebinars (string token);

        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>ApiResponse of List&lt;Webinar&gt;</returns>
        ApiResponse<List<Webinar>> GetWeekWebinarsWithHttpInfo (string token);
        /// <summary>
        /// Выгрузка файлов вебинара преподавателем.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>string</returns>
        string PostWebinarFiles (string token, Guid? webinarId, Stream uploadedFile);

        /// <summary>
        /// Выгрузка файлов вебинара преподавателем.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PostWebinarFilesWithHttpInfo (string token, Guid? webinarId, Stream uploadedFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Получение перечня вебинаров на день пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of List&lt;Webinar&gt;</returns>
        System.Threading.Tasks.Task<List<Webinar>> GetDayWebinarsAsync (string token);

        /// <summary>
        /// Получение перечня вебинаров на день пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of ApiResponse (List&lt;Webinar&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Webinar>>> GetDayWebinarsAsyncWithHttpInfo (string token);
        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetWebinarConnectionAsync (string token, Guid? webinarId);

        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetWebinarConnectionAsyncWithHttpInfo (string token, Guid? webinarId);
        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> GetWebinarDisconnectionAsync(string token, string participationId);

        /// <summary>
        /// Получение ссылки на подключения к вебинару.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetWebinarDisconnectionAsyncWithHttpInfo(string token, string participationId);
        /// <summary>
        /// Получение файла вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetWebinarFileToDownloadAsync (string token, Guid? webinarId, Guid? fileId);

        /// <summary>
        /// Получение файла вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetWebinarFileToDownloadAsyncWithHttpInfo (string token, Guid? webinarId, Guid? fileId);
        /// <summary>
        /// Получение перечня файлов вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>Task of List&lt;ModelFile&gt;</returns>
        System.Threading.Tasks.Task<List<ModelFile>> GetWebinarFilesAsync (string token, Guid? webinarId);

        /// <summary>
        /// Получение перечня файлов вебинара пользователем.
        /// </summary>
        /// <remarks>
        /// Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelFile&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ModelFile>>> GetWebinarFilesAsyncWithHttpInfo (string token, Guid? webinarId);
        /// <summary>
        /// Получение статистики вебинара.
        /// </summary>
        /// <remarks>
        /// Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>Task of Webinar</returns>
        System.Threading.Tasks.Task<Webinar> GetWebinarStaticAsync (string token, Guid? webinarId);

        /// <summary>
        /// Получение статистики вебинара.
        /// </summary>
        /// <remarks>
        /// Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>Task of ApiResponse (Webinar)</returns>
        System.Threading.Tasks.Task<ApiResponse<Webinar>> GetWebinarStaticAsyncWithHttpInfo (string token, Guid? webinarId);
        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of List&lt;Webinar&gt;</returns>
        System.Threading.Tasks.Task<List<Webinar>> GetWeekWebinarsAsync (string token);

        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем.
        /// </summary>
        /// <remarks>
        /// Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of ApiResponse (List&lt;Webinar&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Webinar>>> GetWeekWebinarsAsyncWithHttpInfo (string token);
        /// <summary>
        /// Выгрузка файлов вебинара преподавателем.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PostWebinarFilesAsync (string token, Guid? webinarId, Stream uploadedFile);

        /// <summary>
        /// Выгрузка файлов вебинара преподавателем.
        /// </summary>
        /// <remarks>
        /// Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PostWebinarFilesAsyncWithHttpInfo (string token, Guid? webinarId, Stream uploadedFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebinApi : IWebinApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebinApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebinApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebinApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebinApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Получение перечня вебинаров на день пользователем. Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>List&lt;Webinar&gt;</returns>
        public List<Webinar> GetDayWebinars (string token)
        {
             ApiResponse<List<Webinar>> localVarResponse = GetDayWebinarsWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение перечня вебинаров на день пользователем. Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>ApiResponse of List&lt;Webinar&gt;</returns>
        public ApiResponse< List<Webinar> > GetDayWebinarsWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetDayWebinars");

            var localVarPath = "/webin/day";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDayWebinars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Webinar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Webinar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Webinar>)));
        }

        /// <summary>
        /// Получение перечня вебинаров на день пользователем. Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of List&lt;Webinar&gt;</returns>
        public async System.Threading.Tasks.Task<List<Webinar>> GetDayWebinarsAsync (string token)
        {
             ApiResponse<List<Webinar>> localVarResponse = await GetDayWebinarsAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение перечня вебинаров на день пользователем. Полуение пользователем перечня вебинаров на протяжении всего дня по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of ApiResponse (List&lt;Webinar&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Webinar>>> GetDayWebinarsAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetDayWebinars");

            var localVarPath = "/webin/day";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDayWebinars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Webinar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Webinar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Webinar>)));
        }

        /// <summary>
        /// Получение ссылки на подключения к вебинару. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 GetWebinarConnection (string token, Guid? webinarId)
        {
             ApiResponse<InlineResponse2001> localVarResponse = GetWebinarConnectionWithHttpInfo(token, webinarId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение ссылки на подключения к вебинару. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse< InlineResponse2001 > GetWebinarConnectionWithHttpInfo (string token, Guid? webinarId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarConnection");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarConnection");

            var localVarPath = "/webin/{webinar_id}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Получение ссылки на подключения к вебинару. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetWebinarConnectionAsync (string token, Guid? webinarId)
        {
             ApiResponse<InlineResponse2001> localVarResponse = await GetWebinarConnectionAsyncWithHttpInfo(token, webinarId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение ссылки на подключения к вебинару. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetWebinarConnectionAsyncWithHttpInfo (string token, Guid? webinarId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarConnection");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarConnection");

            var localVarPath = "/webin/{webinar_id}/connect";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarConnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        public InlineResponse2001 GetWebinarDisconnection(string token, string participationId)
        {
            ApiResponse<InlineResponse2001> localVarResponse = GetWebinarDisconnectionWithHttpInfo(token, participationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Получение ссылки на подключения к вебинару. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> GetWebinarDisconnectionWithHttpInfo(string token, string participationId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarDisconnection");
            // verify the required parameter 'webinarId' is set
            if (participationId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarDisconnection");

            var localVarPath = "/webin/{participation_id}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (participationId != null) localVarPathParams.Add("participation_id", this.Configuration.ApiClient.ParameterToString(participationId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarDisconnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Получение ссылки на подключения к вебинару. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> GetWebinarDisconnectionAsync(string token, string participationId)
        {
            ApiResponse<InlineResponse2001> localVarResponse = await GetWebinarDisconnectionAsyncWithHttpInfo(token, participationId);
            return localVarResponse.Data;

        }

        /// <summary>
        /// Получение ссылки на подключения к вебинару. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> GetWebinarDisconnectionAsyncWithHttpInfo(string token, string participationId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarDisconnection");
            // verify the required parameter 'webinarId' is set
            if (participationId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarDisconnection");

            var localVarPath = "/webin/{participation_id}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (participationId != null) localVarPathParams.Add("participation_id", this.Configuration.ApiClient.ParameterToString(participationId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarDisconnection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2001>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2001)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2001)));
        }

        /// <summary>
        /// Получение файла вебинара пользователем. Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>string</returns>
        public string GetWebinarFileToDownload (string token, Guid? webinarId, Guid? fileId)
        {
             ApiResponse<string> localVarResponse = GetWebinarFileToDownloadWithHttpInfo(token, webinarId, fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение файла вебинара пользователем. Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetWebinarFileToDownloadWithHttpInfo (string token, Guid? webinarId, Guid? fileId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarFileToDownload");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarFileToDownload");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WebinApi->GetWebinarFileToDownload");

            var localVarPath = "/webin/{webinar_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarFileToDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Получение файла вебинара пользователем. Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetWebinarFileToDownloadAsync (string token, Guid? webinarId, Guid? fileId)
        {
             ApiResponse<string> localVarResponse = await GetWebinarFileToDownloadAsyncWithHttpInfo(token, webinarId, fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение файла вебинара пользователем. Получение файла пользователем пройденного вебинара по его ID, с подверждением авторизации при помощи token-а и указанием вебинара через его ID.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить файл.</param>
        /// <param name="fileId">Индетификатор файла, который желаем скачать.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetWebinarFileToDownloadAsyncWithHttpInfo (string token, Guid? webinarId, Guid? fileId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarFileToDownload");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarFileToDownload");
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new ApiException(400, "Missing required parameter 'fileId' when calling WebinApi->GetWebinarFileToDownload");

            var localVarPath = "/webin/{webinar_id}/files/{file_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (fileId != null) localVarPathParams.Add("file_id", this.Configuration.ApiClient.ParameterToString(fileId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarFileToDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Получение перечня файлов вебинара пользователем. Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>List&lt;ModelFile&gt;</returns>
        public List<ModelFile> GetWebinarFiles (string token, Guid? webinarId)
        {
             ApiResponse<List<ModelFile>> localVarResponse = GetWebinarFilesWithHttpInfo(token, webinarId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение перечня файлов вебинара пользователем. Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>ApiResponse of List&lt;ModelFile&gt;</returns>
        public ApiResponse< List<ModelFile> > GetWebinarFilesWithHttpInfo (string token, Guid? webinarId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarFiles");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarFiles");

            var localVarPath = "/webin/{webinar_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelFile>)));
        }

        /// <summary>
        /// Получение перечня файлов вебинара пользователем. Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>Task of List&lt;ModelFile&gt;</returns>
        public async System.Threading.Tasks.Task<List<ModelFile>> GetWebinarFilesAsync (string token, Guid? webinarId)
        {
             ApiResponse<List<ModelFile>> localVarResponse = await GetWebinarFilesAsyncWithHttpInfo(token, webinarId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение перечня файлов вебинара пользователем. Получение перечня файлов вебинара пользователями по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить перечень файлов.</param>
        /// <returns>Task of ApiResponse (List&lt;ModelFile&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ModelFile>>> GetWebinarFilesAsyncWithHttpInfo (string token, Guid? webinarId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarFiles");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarFiles");

            var localVarPath = "/webin/{webinar_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ModelFile>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ModelFile>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ModelFile>)));
        }

        /// <summary>
        /// Получение статистики вебинара. Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>Webinar</returns>
        public Webinar GetWebinarStatic (string token, Guid? webinarId)
        {
             ApiResponse<Webinar> localVarResponse = GetWebinarStaticWithHttpInfo(token, webinarId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение статистики вебинара. Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>ApiResponse of Webinar</returns>
        public ApiResponse< Webinar > GetWebinarStaticWithHttpInfo (string token, Guid? webinarId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarStatic");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarStatic");

            var localVarPath = "/webin/{webinar_id}/static";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarStatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webinar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webinar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webinar)));
        }

        /// <summary>
        /// Получение статистики вебинара. Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>Task of Webinar</returns>
        public async System.Threading.Tasks.Task<Webinar> GetWebinarStaticAsync (string token, Guid? webinarId)
        {
             ApiResponse<Webinar> localVarResponse = await GetWebinarStaticAsyncWithHttpInfo(token, webinarId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение статистики вебинара. Полуение преподавателем и администратором статистики пройденного вебинара по его ID, с подверждением авторизации при помощи token-а.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем получить статистику.</param>
        /// <returns>Task of ApiResponse (Webinar)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Webinar>> GetWebinarStaticAsyncWithHttpInfo (string token, Guid? webinarId)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWebinarStatic");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->GetWebinarStatic");

            var localVarPath = "/webin/{webinar_id}/static";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWebinarStatic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Webinar>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Webinar) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Webinar)));
        }

        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем. Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>List&lt;Webinar&gt;</returns>
        public List<Webinar> GetWeekWebinars (string token)
        {
             ApiResponse<List<Webinar>> localVarResponse = GetWeekWebinarsWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем. Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>ApiResponse of List&lt;Webinar&gt;</returns>
        public ApiResponse< List<Webinar> > GetWeekWebinarsWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWeekWebinars");

            var localVarPath = "/webin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWeekWebinars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Webinar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Webinar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Webinar>)));
        }

        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем. Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of List&lt;Webinar&gt;</returns>
        public async System.Threading.Tasks.Task<List<Webinar>> GetWeekWebinarsAsync (string token)
        {
             ApiResponse<List<Webinar>> localVarResponse = await GetWeekWebinarsAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение перечня вебинаров на неделю пользователем. Полуение пользователем перечня вебинаров на протяжении всей недели по его token-у.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <returns>Task of ApiResponse (List&lt;Webinar&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Webinar>>> GetWeekWebinarsAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->GetWeekWebinars");

            var localVarPath = "/webin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetWeekWebinars", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Webinar>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Webinar>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Webinar>)));
        }

        /// <summary>
        /// Выгрузка файлов вебинара преподавателем. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>string</returns>
        public string PostWebinarFiles (string token, Guid? webinarId, Stream uploadedFile)
        {
             ApiResponse<string> localVarResponse = PostWebinarFilesWithHttpInfo(token, webinarId, uploadedFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Выгрузка файлов вебинара преподавателем. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > PostWebinarFilesWithHttpInfo (string token, Guid? webinarId, Stream uploadedFile)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->PostWebinarFiles");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->PostWebinarFiles");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling WebinApi->PostWebinarFiles");

            var localVarPath = "/webin/{webinar_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (uploadedFile != null) localVarFileParams.Add("uploaded_file", this.Configuration.ApiClient.ParameterToFile("uploaded_file", uploadedFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWebinarFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Выгрузка файлов вебинара преподавателем. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PostWebinarFilesAsync (string token, Guid? webinarId, Stream uploadedFile)
        {
             ApiResponse<string> localVarResponse = await PostWebinarFilesAsyncWithHttpInfo(token, webinarId, uploadedFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Выгрузка файлов вебинара преподавателем. Выгрузка файлов вебинара преподавателем и администратором по ID вебинара с подверждением авторизации через token.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Токен пользователя, выданный при аутентификации.</param>
        /// <param name="webinarId">Индетификатор вебинара, по которому желаем выгрузить файл.</param>
        /// <param name="uploadedFile">The file to upload.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> PostWebinarFilesAsyncWithHttpInfo (string token, Guid? webinarId, Stream uploadedFile)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling WebinApi->PostWebinarFiles");
            // verify the required parameter 'webinarId' is set
            if (webinarId == null)
                throw new ApiException(400, "Missing required parameter 'webinarId' when calling WebinApi->PostWebinarFiles");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling WebinApi->PostWebinarFiles");

            var localVarPath = "/webin/{webinar_id}/files";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (webinarId != null) localVarPathParams.Add("webinar_id", this.Configuration.ApiClient.ParameterToString(webinarId)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (uploadedFile != null) localVarFileParams.Add("uploaded_file", this.Configuration.ApiClient.ParameterToFile("uploaded_file", uploadedFile));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostWebinarFiles", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
