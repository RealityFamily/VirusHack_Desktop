/* 
 * Swagger Иди нахер
 *
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Webinar
    /// </summary>
    [DataContract]
    public partial class Webinar :  IEquatable<Webinar>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TypeLesson
        /// </summary>
        [DataMember(Name="typeLesson", EmitDefaultValue=false)]
        public LessonType? TypeLesson { get; set; }
        [DataMember(Name = "lessonStatus", EmitDefaultValue = false)]
        public LessonStatus? LessonStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webinar" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="discipline">discipline.</param>
        /// <param name="groups">groups.</param>
        /// <param name="teacher">teacher.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="present">present.</param>
        /// <param name="typeLesson">typeLesson.</param>
        /// <param name="lessonStatus">lessonStatus.</param>
        /// <param name="files">files.</param>
        public Webinar(Guid? id = default(Guid?), string discipline = default(string), List<Group> groups = default(List<Group>), User teacher = default(User), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), List<User> present = default(List<User>), LessonType? typeLesson = default(LessonType?), LessonStatus? lessonStatus = default(LessonStatus?), List<ModelFile> files = default(List<ModelFile>))
        {
            this.Id = id;
            this.Discipline = discipline;
            this.Groups = groups;
            this.Teacher = teacher;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.Present = present;
            this.TypeLesson = typeLesson;
            this.LessonStatus = lessonStatus;
            this.Files = files;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid? Id { get; set; }

        /// <summary>
        /// Gets or Sets Discipline
        /// </summary>
        [DataMember(Name="discipline", EmitDefaultValue=false)]
        public string Discipline { get; set; }

        /// <summary>
        /// Gets or Sets Groups
        /// </summary>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<Group> Groups { get; set; }

        /// <summary>
        /// Gets or Sets Teacher
        /// </summary>
        [DataMember(Name="teacher", EmitDefaultValue=false)]
        public User Teacher { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Present
        /// </summary>
        [DataMember(Name="present", EmitDefaultValue=false)]
        public List<User> Present { get; set; }


        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<ModelFile> Files { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Webinar {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Discipline: ").Append(Discipline).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Teacher: ").Append(Teacher).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Present: ").Append(Present).Append("\n");
            sb.Append("  TypeLesson: ").Append(TypeLesson).Append("\n");
            sb.Append("  LessonStatus: ").Append(LessonStatus).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Webinar);
        }

        /// <summary>
        /// Returns true if Webinar instances are equal
        /// </summary>
        /// <param name="input">Instance of Webinar to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Webinar input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Discipline == input.Discipline ||
                    (this.Discipline != null &&
                    this.Discipline.Equals(input.Discipline))
                ) && 
                (
                    this.Groups == input.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(input.Groups)
                ) && 
                (
                    this.Teacher == input.Teacher ||
                    (this.Teacher != null &&
                    this.Teacher.Equals(input.Teacher))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Present == input.Present ||
                    this.Present != null &&
                    this.Present.SequenceEqual(input.Present)
                ) && 
                (
                    this.TypeLesson == input.TypeLesson ||
                    (this.TypeLesson != null &&
                    this.TypeLesson.Equals(input.TypeLesson))
                ) &&
                (
                    this.LessonStatus == input.LessonStatus ||
                    (this.LessonStatus != null &&
                    this.TypeLesson.Equals(input.LessonStatus))
                ) &&
                (
                    this.Files == input.Files ||
                    this.Files != null &&
                    this.Files.SequenceEqual(input.Files)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Discipline != null)
                    hashCode = hashCode * 59 + this.Discipline.GetHashCode();
                if (this.Groups != null)
                    hashCode = hashCode * 59 + this.Groups.GetHashCode();
                if (this.Teacher != null)
                    hashCode = hashCode * 59 + this.Teacher.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Present != null)
                    hashCode = hashCode * 59 + this.Present.GetHashCode();
                if (this.TypeLesson != null)
                    hashCode = hashCode * 59 + this.TypeLesson.GetHashCode();
                if (this.LessonStatus != null)
                    hashCode = hashCode * 59 + this.LessonStatus.GetHashCode();
                if (this.Files != null)
                    hashCode = hashCode * 59 + this.Files.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
